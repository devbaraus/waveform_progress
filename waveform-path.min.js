const getAudioData = (e) => {
    window.AudioContext = window.AudioContext || window.webkitAudioContext;
    const a = new AudioContext();
    return fetch(e)
      .then((e) => e.arrayBuffer())
      .then((e) => a.decodeAudioData(e))
      .catch((e) => {
        console.error(e);
      });
  },
  linearPath = (e, a) => {
    const {
      channel: t = 0,
      samples: v = e.length,
      height: h = 100,
      width: r = 800,
      top: s = 0,
      left: l = 0,
      type: i = "steps",
      paths: $ = [{ d: "Q", sx: 0, sy: 0, x: 50, y: 100, ex: 100, ey: 0 }],
      animation: o = !1,
      animationframes: n = 10,
      normalize: b = !0,
    } = a;
    var a = getFramesData(e, t, o, n),
      e = getFilterData(a, v),
      w = b ? getNormalizeData(e) : e;
    let c = "";
    var p,
      f,
      g = "bars" != i ? (h + 2 * s) / 2 : h + s,
      m = r / v,
      y = $.length,
      u = "mirror" == i ? 2 * y : y,
      A = w.length;
    for (let n = 0; n < A; n++) {
      0 < n &&
        ((p = c.length),
        (f = c.charAt(p - 1)),
        (c += ";" == f || 0 === p ? " M 0 0 ;" : ";"));
      let s = -9999,
        o = -9999;
      for (let r = 0; r < v; r++) {
        var M = "bars" == i || r % 2 ? 1 : -1;
        let t = 1;
        for (let e = 0; e < u; e++) {
          let a = e;
          e >= y && ((a = e - y), (t = -1)),
            ($[a].minshow = $[a].minshow ?? 0),
            ($[a].maxshow = $[a].maxshow ?? 1),
            ($[a].normalize = $[a].normalize ?? !1);
          var d = $[a].normalize ? 1 : w[n][r];
          if ($[a].minshow <= w[n][r] && $[a].maxshow >= w[n][r])
            switch ($[a].d) {
              case "L":
                var D = r * m + (m * $[a].sx) / 100 + l,
                  x =
                    g +
                    ((d * $[a].sy) / 100) * ("bars" != i ? h / 2 : h) * -M * t,
                  k = r * m + (m * $[a].ex) / 100 + l,
                  z =
                    g +
                    ((d * $[a].ey) / 100) * ("bars" != i ? h / 2 : h) * -M * t;
                (D === s && x === o) || (c += `M ${D} ${x} `),
                  (c += `L ${k} ${z} `),
                  (s = k),
                  (o = z);
                break;
              case "H":
                (D = r * m + (m * $[a].sx) / 100 + l),
                  (x =
                    g +
                    ((d * $[a].y) / 100) * ("bars" != i ? h / 2 : h) * -M * t),
                  (k = r * m + (m * $[a].ex) / 100 + l);
                (D === s && x === o) || (c += `M ${D} ${x} `),
                  (c += `H ${k} `),
                  (s = k),
                  (o = x);
                break;
              case "V":
                var z = r * m + (m * $[a].x) / 100 + l,
                  C =
                    g +
                    ((d * $[a].sy) / 100) * ("bars" != i ? h / 2 : h) * -M * t,
                  F =
                    g +
                    ((d * $[a].ey) / 100) * ("bars" != i ? h / 2 : h) * -M * t;
                (z === s && C === o) || (c += `M ${z} ${C} `),
                  (c += `V ${F} `),
                  (s = z),
                  (o = F);
                break;
              case "C":
                var C = r * m + (m * $[a].sx) / 100 + l,
                  F = g - ((g * $[a].sy) / 100) * M,
                  Q = r * m + (m * $[a].x) / 100 + l,
                  P =
                    g +
                    ((d * $[a].y) / 100) * ("bars" != i ? h : 2 * h) * -M * t,
                  L = r * m + (m * $[a].ex) / 100 + l,
                  Z = g - ((g * $[a].ey) / 100) * M;
                (C === s && F === o) || (c += `M ${C} ${F} `),
                  (c += `C ${C} ${F} ${Q} ${P} ${L} ${Z} `),
                  (s = L),
                  (o = Z);
                break;
              case "Q":
                var Q = r * m + (m * $[a].sx) / 100 + l,
                  P =
                    g +
                    ((d * $[a].sy) / 100) * ("bars" != i ? h / 2 : h) * -M * t,
                  L = r * m + (m * $[a].x) / 100 + l,
                  Z =
                    g +
                    ((d * $[a].y) / 100) * ("bars" != i ? h : 2 * h) * -M * t,
                  N = r * m + (m * $[a].ex) / 100 + l,
                  H =
                    g +
                    ((d * $[a].ey) / 100) * ("bars" != i ? h / 2 : h) * -M * t;
                (Q === s && P === o) || (c += `M ${Q} ${P} `),
                  (c += `Q ${L} ${Z} ${N} ${H} `),
                  (s = N),
                  (o = H);
                break;
              case "A": {
                var N = r * m + (m * $[a].sx) / 100 + l,
                  H =
                    g +
                    ((d * $[a].sy) / 100) * ("bars" != i ? h / 2 : h) * -M * t,
                  V = r * m + (m * $[a].ex) / 100 + l,
                  B =
                    g +
                    ((d * $[a].ey) / 100) * ("bars" != i ? h / 2 : h) * -M * t,
                  I =
                    ((N === s && H === o) || (c += `M ${N} ${H} `),
                    ($[a].rx * m) / 100),
                  R = ($[a].ry * m) / 100;
                let e = $[a].sweep;
                -1 == M && (e = 1 == e ? 0 : 1),
                  -1 == t && (e = 1 == e ? 0 : 1),
                  (c += `A ${I} ${R} ${$[a].angle} ${$[a].arc} ${e} ${V} ${B} `),
                  (s = V),
                  (o = B);
                break;
              }
              case "Z":
                c += "Z ";
            }
        }
      }
    }
    return c;
  },
  polarPath = (e, a) => {
    const {
      channel: t = 0,
      samples: v = e.length,
      distance: h = 50,
      length: l = 100,
      top: i = 0,
      left: $ = 0,
      type: b = "steps",
      startdeg: r = 0,
      enddeg: s = 360,
      invertdeg: o = !1,
      invertpath: n = !1,
      paths: c = [
        { d: "Q", sdeg: 0, sr: 0, deg: 50, r: 100, edeg: 100, er: 0 },
      ],
      animation: w = !1,
      animationframes: p = 10,
      normalize: f = !0,
    } = a;
    var a = getFramesData(e, t, w, p),
      e = getFilterData(a, v),
      y = f ? getNormalizeData(e) : e;
    let g = "";
    var u,
      A,
      a = s < r ? s + 360 : s,
      m = o ? (r - a) / v : (a - r) / v,
      D = o ? 90 + r + 180 : 90 + r,
      M = n ? -1 : 1,
      k = c.length,
      z = "mirror" == b ? 2 * k : k,
      C = Math.PI / 180,
      F = y.length;
    for (let n = 0; n < F; n++) {
      0 < n &&
        ((u = g.length),
        (A = g.charAt(u - 1)),
        (g += ";" == A || 0 === u ? " M 0 0 ;" : ";"));
      let s = -9999,
        o = -9999;
      for (let r = 0; r < v; r++) {
        var d = "bars" == b || r % 2 ? 1 : -1;
        let t = 1;
        for (let e = 0; e < z; e++) {
          let a = e;
          e >= k && ((a = e - k), (t = -1)),
            (c[a].minshow = c[a].minshow ?? 0),
            (c[a].maxshow = c[a].maxshow ?? 1),
            (c[a].normalize = c[a].normalize ?? !1);
          var x = c[a].normalize ? 1 : y[n][r];
          if (c[a].minshow <= y[n][r] && c[a].maxshow >= y[n][r])
            switch (c[a].d) {
              case "L":
                var Q = (m * (r + c[a].sdeg / 100) - D) * C,
                  P = (m * (r + c[a].edeg / 100) - D) * C,
                  L =
                    $ + (l * (c[a].sr / 100) * x * d * t * M + h) * Math.cos(Q),
                  Q =
                    i + (l * (c[a].sr / 100) * x * d * t * M + h) * Math.sin(Q),
                  Z =
                    $ + (l * (c[a].er / 100) * x * d * t * M + h) * Math.cos(P),
                  P =
                    i + (l * (c[a].er / 100) * x * d * t * M + h) * Math.sin(P);
                (L === s && Q === o) || (g += `M ${L} ${Q} `),
                  (g += `L ${Z} ${P} `),
                  (s = Z),
                  (o = P);
                break;
              case "C":
                var L = (m * (r + c[a].sdeg / 100) - D) * C,
                  Q = (m * (r + c[a].deg / 100) - D) * C,
                  Z = (m * (r + c[a].edeg / 100) - D) * C,
                  P =
                    $ + (l * (c[a].sr / 100) * x * d * t * M + h) * Math.cos(L),
                  N =
                    i + (l * (c[a].sr / 100) * x * d * t * M + h) * Math.sin(L),
                  H =
                    $ + (l * (c[a].r / 100) * x * d * t * M + h) * Math.cos(Q),
                  V =
                    i + (l * (c[a].r / 100) * x * d * t * M + h) * Math.sin(Q),
                  B =
                    $ + (l * (c[a].er / 100) * x * d * t * M + h) * Math.cos(Z),
                  I =
                    i + (l * (c[a].er / 100) * x * d * t * M + h) * Math.sin(Z);
                (P === s && N === o) || (g += `M ${P} ${N} `),
                  (g += `C ${P} ${N} ${H} ${V} ${B} ${I} `),
                  (s = B),
                  (o = I);
                break;
              case "Q":
                var N = (m * (r + c[a].sdeg / 100) - D) * C,
                  H = (m * (r + c[a].deg / 100) - D) * C,
                  V = (m * (r + c[a].edeg / 100) - D) * C,
                  B =
                    $ + (l * (c[a].sr / 100) * x * d * t * M + h) * Math.cos(N),
                  I =
                    i + (l * (c[a].sr / 100) * x * d * t * M + h) * Math.sin(N),
                  R =
                    $ + (l * (c[a].r / 100) * x * d * t * M + h) * Math.cos(H),
                  j =
                    i + (l * (c[a].r / 100) * x * d * t * M + h) * Math.sin(H),
                  q =
                    $ + (l * (c[a].er / 100) * x * d * t * M + h) * Math.cos(V),
                  E =
                    i + (l * (c[a].er / 100) * x * d * t * M + h) * Math.sin(V);
                (B === s && I === o) || (g += `M ${B} ${I} `),
                  (g += `Q ${R} ${j} ${q} ${E} `),
                  (s = q),
                  (o = E);
                break;
              case "A": {
                var R = (m * (r + c[a].sdeg / 100) - D) * C,
                  j = (m * (r + c[a].edeg / 100) - D) * C,
                  q =
                    $ + (l * (c[a].sr / 100) * x * d * t * M + h) * Math.cos(R),
                  E =
                    i + (l * (c[a].sr / 100) * x * d * t * M + h) * Math.sin(R),
                  G =
                    $ + (l * (c[a].er / 100) * x * d * t * M + h) * Math.cos(j),
                  J =
                    i + (l * (c[a].er / 100) * x * d * t * M + h) * Math.sin(j),
                  K =
                    ((q === s && E === o) || (g += `M ${q} ${E} `),
                    (m * r * c[a].angle) / 100),
                  O = (c[a].rx * m) / 100,
                  S = (c[a].ry * m) / 100;
                let e = c[a].sweep;
                -1 == d && (e = 1 == e ? 0 : 1),
                  -1 == t && (e = 1 == e ? 0 : 1),
                  (g += `A ${O} ${S} ${K} ${c[a].arc} ${e} ${G} ${J} `),
                  (s = G),
                  (o = J);
                break;
              }
              case "Z":
                g += "Z ";
            }
        }
      }
    }
    return g;
  },
  getFramesData = (e, a, t, r) => {
    const s = e.getChannelData(a),
      o = [];
    if (t) {
      var n = e.sampleRate / r;
      for (let e = 0; e < s.length; e += n) {
        var h = s.slice(e, e + n);
        o.push(h);
      }
    } else o.push(s);
    return o;
  },
  getFilterData = (r, a) => {
    const e = [];
    var s = r.length;
    for (let t = 0; t < s; t++) {
      var o = Math.floor(r[t].length / a);
      const h = [];
      for (let e = 0; e < a; e++) {
        var n = o * e;
        let a = 0;
        for (let e = 0; e < o; e++) a += Math.abs(r[t][n + e]);
        h.push(a / o);
      }
      e.push(h);
    }
    return e;
  },
  getNormalizeData = (a) => {
    const t = [];
    var r = a.length;
    for (let e = 0; e < r; e++) {
      var s = Math.max(...a[e]);
      t.push(s);
    }
    const o = Math.pow(Math.max(...t), -1),
      n = [];
    for (let e = 0; e < r; e++) {
      var h = a[e].map((e) => e * o);
      n.push(h);
    }
    return n;
  };
export { getAudioData, linearPath, polarPath };
